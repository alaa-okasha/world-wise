.mapContainer {
  flex: 1;
  height: 100%;
  background-color: var(--color-dark--2);
  position: relative;
}

/* Tablet and smaller screens */
@media (max-width: 768px) {
  .mapContainer {
    flex: 1;
    min-height: 60vh; /* Ensure minimum height on mobile */
    height: auto;
    order: 2; /* Place map below sidebar on mobile */
  }
}

/* Mobile screens */
@media (max-width: 480px) {
  .mapContainer {
    min-height: 50vh;
    height: 50vh; /* Fixed height on small mobile */
    border-radius: 0.8rem; /* Add rounded corners for better mobile UX */
  }
}

/* Small mobile screens */
@media (max-width: 375px) {
  .mapContainer {
    min-height: 45vh;
    height: 45vh;
    border-radius: 0.6rem;
  }
}

/* Landscape mobile orientation */
@media (max-width: 768px) and (orientation: landscape) {
  .mapContainer {
    min-height: 70vh;
    height: 70vh;
    flex: 2; /* Give map more space in landscape */
  }
}

/* Very small screens (like older iPhones) */
@media (max-width: 320px) {
  .mapContainer {
    min-height: 40vh;
    height: 40vh;
    border-radius: 0.4rem;
  }
}

.map {
  height: 100%;
}

/* Here we want to style classes that are coming from leaflet. So we want CSS Modules to give us the ACTUAL classnames, not to add some random ID to them, because then they won't match the classnames defined inside the map. The solution is to define these classes as GLOBAL */
:global(.leaflet-popup .leaflet-popup-content-wrapper) {
  background-color: var(--color-dark--1);
  color: var(--color-light--2);
  border-radius: 5px;
  padding-right: 0.6rem;
}

:global(.leaflet-popup .leaflet-popup-content) {
  font-size: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1rem;
}

:global(.leaflet-popup .leaflet-popup-content span:first-child) {
  font-size: 2.5rem;
  line-height: 1;
}

:global(.leaflet-popup .leaflet-popup-tip) {
  background-color: var(--color-dark--1);
}

:global(.leaflet-popup-content-wrapper) {
  border-left: 5px solid var(--color-brand--2);
}
